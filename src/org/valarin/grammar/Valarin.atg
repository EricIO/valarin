COMPILER Valarin

CHARACTERS
	Digit              = '0' .. '9'.
	Zero               = '0'.
	NonZero            = '1' .. '9'.
	HexDigit           = Digit + 'a' .. 'f'.
	BinaryDigit        = "01".
	OctalDigit         = '0' .. '7'.
	Letter             = 'A' .. 'z'.
	IdentStart         = Letter + '-' + '_'.
	IdentifierChar     = IdentStart + Digit.
	Escape             = "\\".
	DoubleQuote        = "\"".
	Quote              = "\'".
	AnyButDoubleQuote  = ANY - DoubleQuote.
	AnyButQuote        = ANY - Quote .
	Cr                 = '\r'.
	Lf                 = '\n'.
	Tab                = '\t'.
	ListOpen           = '['.
	ListClose          = ']'.
	Eol                = Lf.

TOKENS
	ident  = IdentStart {IdentifierChar}.
	// TODO: Add octal,hex and binary digit notation.
	// TODO: Should we have just one number type or ints and floats?
	number = Zero
			 | (NonZero {Digit}).
	float  = (Zero | (NonZero | {Digit})) "." Digit {Digit}.
    // Let "string" and 'string' be valid string literals.
	string = "\"" { ( AnyButDoubleQuote | Escape DoubleQuote | Escape Escape) } "\""
			 | "\'" { AnyButQuote | Escape Quote | Escape Escape} "\'".
	true   = "true".
	false  = "false".
	
	if     = "if".
	else   = "else".
	then   = "then".
	for    = "for".
	do     = "do".
	eol    = Eol.

COMMENTS FROM "%" TO '\n'
IGNORE '\t' + '\n' + '\r'

PRODUCTIONS
	Valarin = 	 											(. ArrayList<ValExpressionNode> nodes = new ArrayList<>(); .)
			  "module" ident
			  {
				(
					Expr<out ValExpressionNode result>  	(. nodes.add(result); .)
					| FunctionDefinition
				)
			  }												(. root = new ValBodyNode(nodes.toArray(new ValStatementNode[nodes.size()])); .)
			  .
	Expr<out ValExpressionNode expr> =						(. expr = null; .)
		(
			Arithmetic <out expr> ";"
			| IfStmt <out expr>
			| ForStmt <out expr>
		).
		
	Arithmetic<out ValExpressionNode expr> =
		Term<out expr> 
		{ 
			("+" | "-" | "||" | "&&")						(. Token op = t; .)
			Term<out ValExpressionNode e2>	 				(. expr = factory.createBinaryNode(op, expr, e2); .)
		}.
		
	Term<out ValExpressionNode expr> =
		Factor<out expr>
		{ 
			("*" | "/") 									(. Token op = t; .)
			Factor<out ValExpressionNode e2>				(. expr = factory.createBinaryNode(op, expr, e2); .)
		}.
		
	Power<out ValExpressionNode result> = 					(. result = null; .)
    															(. ArrayList<ValExpressionNode> args = new ArrayList<>(); .)
    		(
				(
				IF (isFunction() ) (
						(. /*System.out.println("ATG DEBUG: Parsing IDENT as a function");*/ .)
						ident												(. Token funcName =t; .)

							"(" [ Arithmetic <out ValExpressionNode arg>		(. args.add(arg); .)
							{
								"," Arithmetic <out arg>						(. args.add(arg); .)
							}]
							")" 											(. result = factory.createCallNode(funcName,args); .)
						)
				)
				| ident
    			| number										(. result = factory.createNumberLiteral(t); .)
    			| ("true" | "false")							(. result = factory.createBooleanLiteral(t); .)
    			| "(" Arithmetic<out result> ")"
    			| ("!")											(. Token op = t; .)
    				Arithmetic<out ValExpressionNode expr>		(. result = factory.createUnaryNode(op, expr); .)
    			| string										(. result = factory.createStringLiteral(t); .)
    		).
			
	Factor<out ValExpressionNode expr> =
		Power<out expr>
		{
			"**"											(. Token op = t; .)
			Power<out ValExpressionNode e2>					(. expr = factory.createBinaryNode(op, expr, e2); .)
		}.
		

	IfStmt <out ValIfNode ifNode> =							(. ValExpressionNode elseNode = null; .)
		(
			if "(" Expr<out ValExpressionNode condNode> ")" then
				Expr <out ValExpressionNode thenNode>
			[ "else"
				Expr <out elseNode>
			]
		)													(. ifNode = factory.createIfNode(condNode, thenNode, elseNode); .)
		.
	
	ForStmt <out ValForNode cond > =
		(
			for "(" Expr<out ValExpressionNode initNode> ";" Expr<out ValExpressionNode condNode>";" Expr<out ValExpressionNode nextNode> ")" do
				Expr <out ValExpressionNode whileNode>
		)													(. cond = factory.createForNode(initNode,condNode, nextNode, whileNode); .)
		.

	ReturnStatement<out ValStatementNode ret> =
		"return" 
		Expr<out ValExpressionNode retvalue>				(. ret = factory.createReturn(retvalue); .)
		.
		
	FunctionDefinition =
		"function" ident 									(. factory.beginFunction(t); .)
			"(" 
				[
					ident									(. factory.addFunctionParameter(t); .)
					{
						"," 
						ident								(. factory.addFunctionParameter(t); .)
					}
				]
			")"
			"{"
				FunctionBody<out ValFunctionBodyNode body>	(. factory.createFunction(body); .)
			"}".
			
	FunctionBody<out ValFunctionBodyNode body> =			(. ArrayList<ValStatementNode> nodes = new ArrayList<>(); .)
		{
			(
				Expr<out ValExpressionNode expr>				(. nodes.add(expr); .)
				| ReturnStatement<out ValStatementNode ret>		(. nodes.add(ret); .)
			)
		}
																	(. body = factory.createFunctionBody(nodes); .)
	.

	

END Valarin.
